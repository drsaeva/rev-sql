/* 1) Setting up Oracle chinook
* Oracle chinook has been setup
*/

/* 2.0 SQL Queries 
*
*  2.1 SELECT
*/

SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME='King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME='Andrew' AND REPORTSTO IS NULL;

/* 2.2 ORDER BY */

SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

/* 2.3 INSERT INTO */

INSERT ALL 
    INTO GENRE (GENREID, NAME) VALUES (26, 'Funk')
    INTO GENRE (GENREID, NAME) VALUES (27, 'Folk')
SELECT * FROM DUAL;

INSERT ALL 
    INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, HIREDATE) 
        VALUES (9, 'Stevens', 'Robert', 'Sales Support Agent', 2, '31-JAN-05')
    INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, HIREDATE) 
        VALUES (10, 'Smith', 'Susan', 'Sales Support Manager', 1, '22-FEB-05')
SELECT * FROM DUAL;

INSERT ALL 
    INTO CUSTOMER (CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL) 
        VALUES (60, 'Li', 'Xiu Ying', 'l.xiuying@baidu.com')
    INTO CUSTOMER (CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL) 
        VALUES (61, 'Zhang', 'Yong', 'zyong88@weibo.com')
SELECT * FROM DUAL;

/* 2.4 UPDATE */

UPDATE CUSTOMER
SET LASTNAME='Mitchell', FIRSTNAME='Aaron'
WHERE LASTNAME='Walter' AND FIRSTNAME='Robert';

UPDATE ARTIST
SET NAME='CCR'
WHERE NAME='Creedence Clearwater Revival';

/* 2.5 LIKE */

SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

/* 2.6 BETWEEN */

SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04'; 

/* 2.7 DELETE */
DELETE FROM INVOICELINE
WHERE INVOICEID IN
(SELECT INVOICEID FROM INVOICE
WHERE CUSTOMERID=
(SELECT CUSTOMERID FROM CUSTOMER
    WHERE FIRSTNAME='Robert' AND LASTNAME='Walter'));

SELECT * FROM INVOICE
WHERE CUSTOMERID=
(SELECT CUSTOMERID FROM CUSTOMER C 
WHERE FIRSTNAME='Robert' AND LASTNAME='Walter');

DELETE FROM CUSTOMER
WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';

--Could also use ALTER TABLE to add DELETE ON CASCADE to the FK references in CUSTOMER (and INVOICE if needed)

/* 3.0 SQL Functions */

/* 3.1 System Defined Functions */
--Function that returns the current time
CREATE OR REPLACE FUNCTION The_Time_Please
    return varchar2
IS
    the_time    varchar2(20) := to_char(SYSDATE, 'HH24:MI:SS' );
    the_message varchar2(30) := 'The current time is : ' || the_time;
BEGIN
    dbms_output.put_line( the_message );
    return the_message;
END;
/

SELECT The_Time_Please FROM dual;

--function that returns the length of a mediatype from the mediatype table

CREATE OR REPLACE FUNCTION MEDIATYPE_NAME_LENGTH ( MEDIATYPEID_ARG number )
    RETURN number
IS  
    MEDIA_NAME     varchar2(20); 
    NAME_LENGTH    number(20);
    CURSOR c1 is SELECT NAME FROM MEDIATYPE WHERE MEDIATYPEID=MEDIATYPEID_ARG;
BEGIN
    OPEN c1;
    FETCH c1 INTO MEDIA_NAME;
    CLOSE c1;
    NAME_LENGTH := LENGTH(MEDIA_NAME);

RETURN NAME_LENGTH;
END;
/

SELECT MEDIATYPE_NAME_LENGTH(1) FROM DUAL;

/* 3.2 System Defined Aggregate Functions */
--Create a function that returns the average total of all invoices
CREATE OR REPLACE FUNCTION AVG_INVOICE_TOTAL
    RETURN number
IS  
    AVG_TOTAL    number(5);
    CURSOR c1 is SELECT AVG(TOTAL) FROM INVOICE;
BEGIN
    OPEN c1;
    FETCH c1 INTO AVG_TOTAL;
    CLOSE c1;
RETURN AVG_TOTAL;
END;
/

SELECT AVG_INVOICE_TOTAL FROM DUAL;

--Create a function that returns the most expensive track
CREATE OR REPLACE FUNCTION MOST_EXP_TRACK
    RETURN number
IS  
    MOST_EXP    number(5);
    CURSOR c1 is SELECT MAX(UNITPRICE) FROM TRACK;
BEGIN
    OPEN c1;
    FETCH c1 INTO MOST_EXP;
    CLOSE c1;
RETURN MOST_EXP;
END;
/

SELECT MOST_EXP_TRACK FROM DUAL;

/* 3.3 User Defined Scalar Functions */
--Creat a function that returns the average price of invoiceline items in invoiceline
CREATE OR REPLACE FUNCTION AVG_TRACK_IN_INVOICE ( INVOICEID_ARG NUMBER )
    RETURN number
IS  
    AVG_PRICE    number(5);
    CURSOR c1 is SELECT AVG(UNITPRICE) FROM INVOICELINE WHERE INVOICEID=INVOICEID_ARG;
BEGIN
    OPEN c1;
    FETCH c1 INTO AVG_PRICE;
    CLOSE c1;
RETURN AVG_PRICE;
END;
/

SELECT AVG_TRACK_IN_INVOICE(123) FROM DUAL;

/* 3.4 User Defined Table Valued Functions */
--Create a function that returns all employees born after 1968

CREATE OR REPLACE TYPE T_YOUNG_EMPL AS OBJECT (
    EMPLOYEEID          NUMBER,       
    LASTNAME            VARCHAR2(20), 
    FIRSTNAME           VARCHAR2(20)
);
/
CREATE OR REPLACE TYPE T_YOUNG_EMPLS AS TABLE OF T_YOUNG_EMPLOYEE;
/
CREATE OR REPLACE FUNCTION GET_YOUNG_EMPLOYEES
        RETURN T_YOUNG_EMPLS
        PIPELINED IS
BEGIN
    FOR I IN (SELECT EMPLOYEEID, LASTNAME, FIRSTNAME FROM EMPLOYEE WHERE BIRTHDATE > '31-DEC-68') LOOP
        PIPE ROW (T_YOUNG_EMPL(I.EMPLOYEEID, I.EMPLOYEE.LASTNAME, I.EMPLOYEE.FIRSTNAME));
    END LOOP;
    RETURN;
END;
/

/* 4.0 Stored Procedures */
/* 41. Basic Stored Procedures */
--Create a SP that updates the first and last names of all the employees

